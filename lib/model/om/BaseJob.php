<?php

/**
 * Base class that represents a row from the 'job' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Aug 12 12:14:21 2009
 *
 * @package    lib.model.om
 */
abstract class BaseJob extends BaseObject  implements Persistent {


  const PEER = 'JobPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        JobPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the project_id field.
	 * @var        int
	 */
	protected $project_id;

	/**
	 * The value for the publication_id field.
	 * @var        int
	 */
	protected $publication_id;

	/**
	 * The value for the status_id field.
	 * @var        int
	 */
	protected $status_id;

	/**
	 * The value for the event field.
	 * @var        string
	 */
	protected $event;

	/**
	 * The value for the date field.
	 * @var        string
	 */
	protected $date;

	/**
	 * The value for the start_time field.
	 * @var        string
	 */
	protected $start_time;

	/**
	 * The value for the end_time field.
	 * @var        string
	 */
	protected $end_time;

	/**
	 * The value for the due_date field.
	 * @var        string
	 */
	protected $due_date;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the street field.
	 * @var        string
	 */
	protected $street;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the zip field.
	 * @var        string
	 */
	protected $zip;

	/**
	 * The value for the contact_name field.
	 * @var        string
	 */
	protected $contact_name;

	/**
	 * The value for the contact_email field.
	 * @var        string
	 */
	protected $contact_email;

	/**
	 * The value for the contact_phone field.
	 * @var        string
	 */
	protected $contact_phone;

	/**
	 * The value for the notes field.
	 * @var        string
	 */
	protected $notes;

	/**
	 * The value for the estimate field.
	 * @var        int
	 */
	protected $estimate;

	/**
	 * The value for the acct_num field.
	 * @var        string
	 */
	protected $acct_num;

	/**
	 * The value for the dept_id field.
	 * @var        string
	 */
	protected $dept_id;

	/**
	 * The value for the grant_id field.
	 * @var        string
	 */
	protected $grant_id;

	/**
	 * The value for the other field.
	 * @var        string
	 */
	protected $other;

	/**
	 * The value for the ques1 field.
	 * @var        string
	 */
	protected $ques1;

	/**
	 * The value for the ques2 field.
	 * @var        string
	 */
	protected $ques2;

	/**
	 * The value for the ques3 field.
	 * @var        string
	 */
	protected $ques3;

	/**
	 * The value for the slug field.
	 * @var        string
	 */
	protected $slug;

	/**
	 * The value for the photo_type field.
	 * @var        int
	 */
	protected $photo_type;

	/**
	 * The value for the processing field.
	 * @var        string
	 */
	protected $processing;

	/**
	 * The value for the g_cal_id field.
	 * @var        string
	 */
	protected $g_cal_id;

	/**
	 * The value for the g_cal_id_custom field.
	 * @var        string
	 */
	protected $g_cal_id_custom;

	/**
	 * The value for the g_cal_id_custom_url field.
	 * @var        string
	 */
	protected $g_cal_id_custom_url;

	/**
	 * @var        Publication
	 */
	protected $aPublication;

	/**
	 * @var        Project
	 */
	protected $aProject;

	/**
	 * @var        Status
	 */
	protected $aStatus;

	/**
	 * @var        PhotoType
	 */
	protected $aPhotoTypeRelatedByPhotoType;

	/**
	 * @var        array JobAttachment[] Collection to store aggregation of JobAttachment objects.
	 */
	protected $collJobAttachments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJobAttachments.
	 */
	private $lastJobAttachmentCriteria = null;

	/**
	 * @var        array Photo[] Collection to store aggregation of Photo objects.
	 */
	protected $collPhotos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPhotos.
	 */
	private $lastPhotoCriteria = null;

	/**
	 * @var        array Delivery[] Collection to store aggregation of Delivery objects.
	 */
	protected $collDeliverys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDeliverys.
	 */
	private $lastDeliveryCriteria = null;

	/**
	 * @var        array JobPhotographer[] Collection to store aggregation of JobPhotographer objects.
	 */
	protected $collJobPhotographers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJobPhotographers.
	 */
	private $lastJobPhotographerCriteria = null;

	/**
	 * @var        array JobClient[] Collection to store aggregation of JobClient objects.
	 */
	protected $collJobClients;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJobClients.
	 */
	private $lastJobClientCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseJob object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [project_id] column value.
	 * 
	 * @return     int
	 */
	public function getProjectId()
	{
		return $this->project_id;
	}

	/**
	 * Get the [publication_id] column value.
	 * 
	 * @return     int
	 */
	public function getPublicationId()
	{
		return $this->publication_id;
	}

	/**
	 * Get the [status_id] column value.
	 * 
	 * @return     int
	 */
	public function getStatusId()
	{
		return $this->status_id;
	}

	/**
	 * Get the [event] column value.
	 * 
	 * @return     string
	 */
	public function getEvent()
	{
		return $this->event;
	}

	/**
	 * Get the [optionally formatted] temporal [date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDate($format = 'Y-m-d')
	{
		if ($this->date === null) {
			return null;
		}


		if ($this->date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [start_time] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getStartTime($format = 'H:i:s')
	{
		if ($this->start_time === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->start_time);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->start_time, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [end_time] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEndTime($format = 'H:i:s')
	{
		if ($this->end_time === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->end_time);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->end_time, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [due_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDueDate($format = 'Y-m-d H:i:s')
	{
		if ($this->due_date === null) {
			return null;
		}


		if ($this->due_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->due_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->due_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [street] column value.
	 * 
	 * @return     string
	 */
	public function getStreet()
	{
		return $this->street;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [zip] column value.
	 * 
	 * @return     string
	 */
	public function getZip()
	{
		return $this->zip;
	}

	/**
	 * Get the [contact_name] column value.
	 * 
	 * @return     string
	 */
	public function getContactName()
	{
		return $this->contact_name;
	}

	/**
	 * Get the [contact_email] column value.
	 * 
	 * @return     string
	 */
	public function getContactEmail()
	{
		return $this->contact_email;
	}

	/**
	 * Get the [contact_phone] column value.
	 * 
	 * @return     string
	 */
	public function getContactPhone()
	{
		return $this->contact_phone;
	}

	/**
	 * Get the [notes] column value.
	 * 
	 * @return     string
	 */
	public function getNotes()
	{
		return $this->notes;
	}

	/**
	 * Get the [estimate] column value.
	 * 
	 * @return     int
	 */
	public function getEstimate()
	{
		return $this->estimate;
	}

	/**
	 * Get the [acct_num] column value.
	 * 
	 * @return     string
	 */
	public function getAcctNum()
	{
		return $this->acct_num;
	}

	/**
	 * Get the [dept_id] column value.
	 * 
	 * @return     string
	 */
	public function getDeptId()
	{
		return $this->dept_id;
	}

	/**
	 * Get the [grant_id] column value.
	 * 
	 * @return     string
	 */
	public function getGrantId()
	{
		return $this->grant_id;
	}

	/**
	 * Get the [other] column value.
	 * 
	 * @return     string
	 */
	public function getOther()
	{
		return $this->other;
	}

	/**
	 * Get the [ques1] column value.
	 * 
	 * @return     string
	 */
	public function getQues1()
	{
		return $this->ques1;
	}

	/**
	 * Get the [ques2] column value.
	 * 
	 * @return     string
	 */
	public function getQues2()
	{
		return $this->ques2;
	}

	/**
	 * Get the [ques3] column value.
	 * 
	 * @return     string
	 */
	public function getQues3()
	{
		return $this->ques3;
	}

	/**
	 * Get the [slug] column value.
	 * 
	 * @return     string
	 */
	public function getSlug()
	{
		return $this->slug;
	}

	/**
	 * Get the [photo_type] column value.
	 * 
	 * @return     int
	 */
	public function getPhotoType()
	{
		return $this->photo_type;
	}

	/**
	 * Get the [processing] column value.
	 * 
	 * @return     string
	 */
	public function getProcessing()
	{
		return $this->processing;
	}

	/**
	 * Get the [g_cal_id] column value.
	 * 
	 * @return     string
	 */
	public function getGCalId()
	{
		return $this->g_cal_id;
	}

	/**
	 * Get the [g_cal_id_custom] column value.
	 * 
	 * @return     string
	 */
	public function getGCalIdCustom()
	{
		return $this->g_cal_id_custom;
	}

	/**
	 * Get the [g_cal_id_custom_url] column value.
	 * 
	 * @return     string
	 */
	public function getGCalIdCustomUrl()
	{
		return $this->g_cal_id_custom_url;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = JobPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [project_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setProjectId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->project_id !== $v) {
			$this->project_id = $v;
			$this->modifiedColumns[] = JobPeer::PROJECT_ID;
		}

		if ($this->aProject !== null && $this->aProject->getId() !== $v) {
			$this->aProject = null;
		}

		return $this;
	} // setProjectId()

	/**
	 * Set the value of [publication_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setPublicationId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->publication_id !== $v) {
			$this->publication_id = $v;
			$this->modifiedColumns[] = JobPeer::PUBLICATION_ID;
		}

		if ($this->aPublication !== null && $this->aPublication->getId() !== $v) {
			$this->aPublication = null;
		}

		return $this;
	} // setPublicationId()

	/**
	 * Set the value of [status_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setStatusId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status_id !== $v) {
			$this->status_id = $v;
			$this->modifiedColumns[] = JobPeer::STATUS_ID;
		}

		if ($this->aStatus !== null && $this->aStatus->getId() !== $v) {
			$this->aStatus = null;
		}

		return $this;
	} // setStatusId()

	/**
	 * Set the value of [event] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setEvent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->event !== $v) {
			$this->event = $v;
			$this->modifiedColumns[] = JobPeer::EVENT;
		}

		return $this;
	} // setEvent()

	/**
	 * Sets the value of [date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Job The current object (for fluent API support)
	 */
	public function setDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date !== null && $tmpDt = new DateTime($this->date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = JobPeer::DATE;
			}
		} // if either are not null

		return $this;
	} // setDate()

	/**
	 * Sets the value of [start_time] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Job The current object (for fluent API support)
	 */
	public function setStartTime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->start_time !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->start_time !== null && $tmpDt = new DateTime($this->start_time)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->start_time = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = JobPeer::START_TIME;
			}
		} // if either are not null

		return $this;
	} // setStartTime()

	/**
	 * Sets the value of [end_time] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Job The current object (for fluent API support)
	 */
	public function setEndTime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->end_time !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->end_time !== null && $tmpDt = new DateTime($this->end_time)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->end_time = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = JobPeer::END_TIME;
			}
		} // if either are not null

		return $this;
	} // setEndTime()

	/**
	 * Sets the value of [due_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Job The current object (for fluent API support)
	 */
	public function setDueDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->due_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->due_date !== null && $tmpDt = new DateTime($this->due_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->due_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = JobPeer::DUE_DATE;
			}
		} // if either are not null

		return $this;
	} // setDueDate()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Job The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = JobPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [street] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setStreet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->street !== $v) {
			$this->street = $v;
			$this->modifiedColumns[] = JobPeer::STREET;
		}

		return $this;
	} // setStreet()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = JobPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = JobPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [zip] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setZip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zip !== $v) {
			$this->zip = $v;
			$this->modifiedColumns[] = JobPeer::ZIP;
		}

		return $this;
	} // setZip()

	/**
	 * Set the value of [contact_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setContactName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_name !== $v) {
			$this->contact_name = $v;
			$this->modifiedColumns[] = JobPeer::CONTACT_NAME;
		}

		return $this;
	} // setContactName()

	/**
	 * Set the value of [contact_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setContactEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_email !== $v) {
			$this->contact_email = $v;
			$this->modifiedColumns[] = JobPeer::CONTACT_EMAIL;
		}

		return $this;
	} // setContactEmail()

	/**
	 * Set the value of [contact_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setContactPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_phone !== $v) {
			$this->contact_phone = $v;
			$this->modifiedColumns[] = JobPeer::CONTACT_PHONE;
		}

		return $this;
	} // setContactPhone()

	/**
	 * Set the value of [notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notes !== $v) {
			$this->notes = $v;
			$this->modifiedColumns[] = JobPeer::NOTES;
		}

		return $this;
	} // setNotes()

	/**
	 * Set the value of [estimate] column.
	 * 
	 * @param      int $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setEstimate($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->estimate !== $v) {
			$this->estimate = $v;
			$this->modifiedColumns[] = JobPeer::ESTIMATE;
		}

		return $this;
	} // setEstimate()

	/**
	 * Set the value of [acct_num] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setAcctNum($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->acct_num !== $v) {
			$this->acct_num = $v;
			$this->modifiedColumns[] = JobPeer::ACCT_NUM;
		}

		return $this;
	} // setAcctNum()

	/**
	 * Set the value of [dept_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setDeptId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dept_id !== $v) {
			$this->dept_id = $v;
			$this->modifiedColumns[] = JobPeer::DEPT_ID;
		}

		return $this;
	} // setDeptId()

	/**
	 * Set the value of [grant_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setGrantId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->grant_id !== $v) {
			$this->grant_id = $v;
			$this->modifiedColumns[] = JobPeer::GRANT_ID;
		}

		return $this;
	} // setGrantId()

	/**
	 * Set the value of [other] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setOther($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other !== $v) {
			$this->other = $v;
			$this->modifiedColumns[] = JobPeer::OTHER;
		}

		return $this;
	} // setOther()

	/**
	 * Set the value of [ques1] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setQues1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ques1 !== $v) {
			$this->ques1 = $v;
			$this->modifiedColumns[] = JobPeer::QUES1;
		}

		return $this;
	} // setQues1()

	/**
	 * Set the value of [ques2] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setQues2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ques2 !== $v) {
			$this->ques2 = $v;
			$this->modifiedColumns[] = JobPeer::QUES2;
		}

		return $this;
	} // setQues2()

	/**
	 * Set the value of [ques3] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setQues3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ques3 !== $v) {
			$this->ques3 = $v;
			$this->modifiedColumns[] = JobPeer::QUES3;
		}

		return $this;
	} // setQues3()

	/**
	 * Set the value of [slug] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setSlug($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->slug !== $v) {
			$this->slug = $v;
			$this->modifiedColumns[] = JobPeer::SLUG;
		}

		return $this;
	} // setSlug()

	/**
	 * Set the value of [photo_type] column.
	 * 
	 * @param      int $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setPhotoType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->photo_type !== $v) {
			$this->photo_type = $v;
			$this->modifiedColumns[] = JobPeer::PHOTO_TYPE;
		}

		if ($this->aPhotoTypeRelatedByPhotoType !== null && $this->aPhotoTypeRelatedByPhotoType->getId() !== $v) {
			$this->aPhotoTypeRelatedByPhotoType = null;
		}

		return $this;
	} // setPhotoType()

	/**
	 * Set the value of [processing] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setProcessing($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->processing !== $v) {
			$this->processing = $v;
			$this->modifiedColumns[] = JobPeer::PROCESSING;
		}

		return $this;
	} // setProcessing()

	/**
	 * Set the value of [g_cal_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setGCalId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->g_cal_id !== $v) {
			$this->g_cal_id = $v;
			$this->modifiedColumns[] = JobPeer::G_CAL_ID;
		}

		return $this;
	} // setGCalId()

	/**
	 * Set the value of [g_cal_id_custom] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setGCalIdCustom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->g_cal_id_custom !== $v) {
			$this->g_cal_id_custom = $v;
			$this->modifiedColumns[] = JobPeer::G_CAL_ID_CUSTOM;
		}

		return $this;
	} // setGCalIdCustom()

	/**
	 * Set the value of [g_cal_id_custom_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Job The current object (for fluent API support)
	 */
	public function setGCalIdCustomUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->g_cal_id_custom_url !== $v) {
			$this->g_cal_id_custom_url = $v;
			$this->modifiedColumns[] = JobPeer::G_CAL_ID_CUSTOM_URL;
		}

		return $this;
	} // setGCalIdCustomUrl()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->project_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->publication_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->status_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->event = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->date = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->start_time = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->end_time = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->due_date = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->created_at = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->street = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->city = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->state = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->zip = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->contact_name = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->contact_email = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->contact_phone = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->notes = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->estimate = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->acct_num = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->dept_id = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->grant_id = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->other = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->ques1 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->ques2 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->ques3 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->slug = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->photo_type = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->processing = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->g_cal_id = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->g_cal_id_custom = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->g_cal_id_custom_url = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 32; // 32 = JobPeer::NUM_COLUMNS - JobPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Job object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProject !== null && $this->project_id !== $this->aProject->getId()) {
			$this->aProject = null;
		}
		if ($this->aPublication !== null && $this->publication_id !== $this->aPublication->getId()) {
			$this->aPublication = null;
		}
		if ($this->aStatus !== null && $this->status_id !== $this->aStatus->getId()) {
			$this->aStatus = null;
		}
		if ($this->aPhotoTypeRelatedByPhotoType !== null && $this->photo_type !== $this->aPhotoTypeRelatedByPhotoType->getId()) {
			$this->aPhotoTypeRelatedByPhotoType = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(JobPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = JobPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aPublication = null;
			$this->aProject = null;
			$this->aStatus = null;
			$this->aPhotoTypeRelatedByPhotoType = null;
			$this->collJobAttachments = null;
			$this->lastJobAttachmentCriteria = null;

			$this->collPhotos = null;
			$this->lastPhotoCriteria = null;

			$this->collDeliverys = null;
			$this->lastDeliveryCriteria = null;

			$this->collJobPhotographers = null;
			$this->lastJobPhotographerCriteria = null;

			$this->collJobClients = null;
			$this->lastJobClientCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJob:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(JobPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			JobPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseJob:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseJob:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(JobPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(JobPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseJob:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			JobPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPublication !== null) {
				if ($this->aPublication->isModified() || $this->aPublication->isNew()) {
					$affectedRows += $this->aPublication->save($con);
				}
				$this->setPublication($this->aPublication);
			}

			if ($this->aProject !== null) {
				if ($this->aProject->isModified() || $this->aProject->isNew()) {
					$affectedRows += $this->aProject->save($con);
				}
				$this->setProject($this->aProject);
			}

			if ($this->aStatus !== null) {
				if ($this->aStatus->isModified() || $this->aStatus->isNew()) {
					$affectedRows += $this->aStatus->save($con);
				}
				$this->setStatus($this->aStatus);
			}

			if ($this->aPhotoTypeRelatedByPhotoType !== null) {
				if ($this->aPhotoTypeRelatedByPhotoType->isModified() || $this->aPhotoTypeRelatedByPhotoType->isNew()) {
					$affectedRows += $this->aPhotoTypeRelatedByPhotoType->save($con);
				}
				$this->setPhotoTypeRelatedByPhotoType($this->aPhotoTypeRelatedByPhotoType);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = JobPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = JobPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += JobPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collJobAttachments !== null) {
				foreach ($this->collJobAttachments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPhotos !== null) {
				foreach ($this->collPhotos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDeliverys !== null) {
				foreach ($this->collDeliverys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJobPhotographers !== null) {
				foreach ($this->collJobPhotographers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJobClients !== null) {
				foreach ($this->collJobClients as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPublication !== null) {
				if (!$this->aPublication->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPublication->getValidationFailures());
				}
			}

			if ($this->aProject !== null) {
				if (!$this->aProject->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProject->getValidationFailures());
				}
			}

			if ($this->aStatus !== null) {
				if (!$this->aStatus->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aStatus->getValidationFailures());
				}
			}

			if ($this->aPhotoTypeRelatedByPhotoType !== null) {
				if (!$this->aPhotoTypeRelatedByPhotoType->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPhotoTypeRelatedByPhotoType->getValidationFailures());
				}
			}


			if (($retval = JobPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collJobAttachments !== null) {
					foreach ($this->collJobAttachments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPhotos !== null) {
					foreach ($this->collPhotos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDeliverys !== null) {
					foreach ($this->collDeliverys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJobPhotographers !== null) {
					foreach ($this->collJobPhotographers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJobClients !== null) {
					foreach ($this->collJobClients as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = JobPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getProjectId();
				break;
			case 2:
				return $this->getPublicationId();
				break;
			case 3:
				return $this->getStatusId();
				break;
			case 4:
				return $this->getEvent();
				break;
			case 5:
				return $this->getDate();
				break;
			case 6:
				return $this->getStartTime();
				break;
			case 7:
				return $this->getEndTime();
				break;
			case 8:
				return $this->getDueDate();
				break;
			case 9:
				return $this->getCreatedAt();
				break;
			case 10:
				return $this->getStreet();
				break;
			case 11:
				return $this->getCity();
				break;
			case 12:
				return $this->getState();
				break;
			case 13:
				return $this->getZip();
				break;
			case 14:
				return $this->getContactName();
				break;
			case 15:
				return $this->getContactEmail();
				break;
			case 16:
				return $this->getContactPhone();
				break;
			case 17:
				return $this->getNotes();
				break;
			case 18:
				return $this->getEstimate();
				break;
			case 19:
				return $this->getAcctNum();
				break;
			case 20:
				return $this->getDeptId();
				break;
			case 21:
				return $this->getGrantId();
				break;
			case 22:
				return $this->getOther();
				break;
			case 23:
				return $this->getQues1();
				break;
			case 24:
				return $this->getQues2();
				break;
			case 25:
				return $this->getQues3();
				break;
			case 26:
				return $this->getSlug();
				break;
			case 27:
				return $this->getPhotoType();
				break;
			case 28:
				return $this->getProcessing();
				break;
			case 29:
				return $this->getGCalId();
				break;
			case 30:
				return $this->getGCalIdCustom();
				break;
			case 31:
				return $this->getGCalIdCustomUrl();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = JobPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getProjectId(),
			$keys[2] => $this->getPublicationId(),
			$keys[3] => $this->getStatusId(),
			$keys[4] => $this->getEvent(),
			$keys[5] => $this->getDate(),
			$keys[6] => $this->getStartTime(),
			$keys[7] => $this->getEndTime(),
			$keys[8] => $this->getDueDate(),
			$keys[9] => $this->getCreatedAt(),
			$keys[10] => $this->getStreet(),
			$keys[11] => $this->getCity(),
			$keys[12] => $this->getState(),
			$keys[13] => $this->getZip(),
			$keys[14] => $this->getContactName(),
			$keys[15] => $this->getContactEmail(),
			$keys[16] => $this->getContactPhone(),
			$keys[17] => $this->getNotes(),
			$keys[18] => $this->getEstimate(),
			$keys[19] => $this->getAcctNum(),
			$keys[20] => $this->getDeptId(),
			$keys[21] => $this->getGrantId(),
			$keys[22] => $this->getOther(),
			$keys[23] => $this->getQues1(),
			$keys[24] => $this->getQues2(),
			$keys[25] => $this->getQues3(),
			$keys[26] => $this->getSlug(),
			$keys[27] => $this->getPhotoType(),
			$keys[28] => $this->getProcessing(),
			$keys[29] => $this->getGCalId(),
			$keys[30] => $this->getGCalIdCustom(),
			$keys[31] => $this->getGCalIdCustomUrl(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = JobPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setProjectId($value);
				break;
			case 2:
				$this->setPublicationId($value);
				break;
			case 3:
				$this->setStatusId($value);
				break;
			case 4:
				$this->setEvent($value);
				break;
			case 5:
				$this->setDate($value);
				break;
			case 6:
				$this->setStartTime($value);
				break;
			case 7:
				$this->setEndTime($value);
				break;
			case 8:
				$this->setDueDate($value);
				break;
			case 9:
				$this->setCreatedAt($value);
				break;
			case 10:
				$this->setStreet($value);
				break;
			case 11:
				$this->setCity($value);
				break;
			case 12:
				$this->setState($value);
				break;
			case 13:
				$this->setZip($value);
				break;
			case 14:
				$this->setContactName($value);
				break;
			case 15:
				$this->setContactEmail($value);
				break;
			case 16:
				$this->setContactPhone($value);
				break;
			case 17:
				$this->setNotes($value);
				break;
			case 18:
				$this->setEstimate($value);
				break;
			case 19:
				$this->setAcctNum($value);
				break;
			case 20:
				$this->setDeptId($value);
				break;
			case 21:
				$this->setGrantId($value);
				break;
			case 22:
				$this->setOther($value);
				break;
			case 23:
				$this->setQues1($value);
				break;
			case 24:
				$this->setQues2($value);
				break;
			case 25:
				$this->setQues3($value);
				break;
			case 26:
				$this->setSlug($value);
				break;
			case 27:
				$this->setPhotoType($value);
				break;
			case 28:
				$this->setProcessing($value);
				break;
			case 29:
				$this->setGCalId($value);
				break;
			case 30:
				$this->setGCalIdCustom($value);
				break;
			case 31:
				$this->setGCalIdCustomUrl($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = JobPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setProjectId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPublicationId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setStatusId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setEvent($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDate($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setStartTime($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEndTime($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDueDate($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCreatedAt($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setStreet($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCity($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setState($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setZip($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setContactName($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setContactEmail($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setContactPhone($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setNotes($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setEstimate($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setAcctNum($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setDeptId($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setGrantId($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setOther($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setQues1($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setQues2($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setQues3($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setSlug($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setPhotoType($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setProcessing($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setGCalId($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setGCalIdCustom($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setGCalIdCustomUrl($arr[$keys[31]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(JobPeer::DATABASE_NAME);

		if ($this->isColumnModified(JobPeer::ID)) $criteria->add(JobPeer::ID, $this->id);
		if ($this->isColumnModified(JobPeer::PROJECT_ID)) $criteria->add(JobPeer::PROJECT_ID, $this->project_id);
		if ($this->isColumnModified(JobPeer::PUBLICATION_ID)) $criteria->add(JobPeer::PUBLICATION_ID, $this->publication_id);
		if ($this->isColumnModified(JobPeer::STATUS_ID)) $criteria->add(JobPeer::STATUS_ID, $this->status_id);
		if ($this->isColumnModified(JobPeer::EVENT)) $criteria->add(JobPeer::EVENT, $this->event);
		if ($this->isColumnModified(JobPeer::DATE)) $criteria->add(JobPeer::DATE, $this->date);
		if ($this->isColumnModified(JobPeer::START_TIME)) $criteria->add(JobPeer::START_TIME, $this->start_time);
		if ($this->isColumnModified(JobPeer::END_TIME)) $criteria->add(JobPeer::END_TIME, $this->end_time);
		if ($this->isColumnModified(JobPeer::DUE_DATE)) $criteria->add(JobPeer::DUE_DATE, $this->due_date);
		if ($this->isColumnModified(JobPeer::CREATED_AT)) $criteria->add(JobPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(JobPeer::STREET)) $criteria->add(JobPeer::STREET, $this->street);
		if ($this->isColumnModified(JobPeer::CITY)) $criteria->add(JobPeer::CITY, $this->city);
		if ($this->isColumnModified(JobPeer::STATE)) $criteria->add(JobPeer::STATE, $this->state);
		if ($this->isColumnModified(JobPeer::ZIP)) $criteria->add(JobPeer::ZIP, $this->zip);
		if ($this->isColumnModified(JobPeer::CONTACT_NAME)) $criteria->add(JobPeer::CONTACT_NAME, $this->contact_name);
		if ($this->isColumnModified(JobPeer::CONTACT_EMAIL)) $criteria->add(JobPeer::CONTACT_EMAIL, $this->contact_email);
		if ($this->isColumnModified(JobPeer::CONTACT_PHONE)) $criteria->add(JobPeer::CONTACT_PHONE, $this->contact_phone);
		if ($this->isColumnModified(JobPeer::NOTES)) $criteria->add(JobPeer::NOTES, $this->notes);
		if ($this->isColumnModified(JobPeer::ESTIMATE)) $criteria->add(JobPeer::ESTIMATE, $this->estimate);
		if ($this->isColumnModified(JobPeer::ACCT_NUM)) $criteria->add(JobPeer::ACCT_NUM, $this->acct_num);
		if ($this->isColumnModified(JobPeer::DEPT_ID)) $criteria->add(JobPeer::DEPT_ID, $this->dept_id);
		if ($this->isColumnModified(JobPeer::GRANT_ID)) $criteria->add(JobPeer::GRANT_ID, $this->grant_id);
		if ($this->isColumnModified(JobPeer::OTHER)) $criteria->add(JobPeer::OTHER, $this->other);
		if ($this->isColumnModified(JobPeer::QUES1)) $criteria->add(JobPeer::QUES1, $this->ques1);
		if ($this->isColumnModified(JobPeer::QUES2)) $criteria->add(JobPeer::QUES2, $this->ques2);
		if ($this->isColumnModified(JobPeer::QUES3)) $criteria->add(JobPeer::QUES3, $this->ques3);
		if ($this->isColumnModified(JobPeer::SLUG)) $criteria->add(JobPeer::SLUG, $this->slug);
		if ($this->isColumnModified(JobPeer::PHOTO_TYPE)) $criteria->add(JobPeer::PHOTO_TYPE, $this->photo_type);
		if ($this->isColumnModified(JobPeer::PROCESSING)) $criteria->add(JobPeer::PROCESSING, $this->processing);
		if ($this->isColumnModified(JobPeer::G_CAL_ID)) $criteria->add(JobPeer::G_CAL_ID, $this->g_cal_id);
		if ($this->isColumnModified(JobPeer::G_CAL_ID_CUSTOM)) $criteria->add(JobPeer::G_CAL_ID_CUSTOM, $this->g_cal_id_custom);
		if ($this->isColumnModified(JobPeer::G_CAL_ID_CUSTOM_URL)) $criteria->add(JobPeer::G_CAL_ID_CUSTOM_URL, $this->g_cal_id_custom_url);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(JobPeer::DATABASE_NAME);

		$criteria->add(JobPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Job (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setProjectId($this->project_id);

		$copyObj->setPublicationId($this->publication_id);

		$copyObj->setStatusId($this->status_id);

		$copyObj->setEvent($this->event);

		$copyObj->setDate($this->date);

		$copyObj->setStartTime($this->start_time);

		$copyObj->setEndTime($this->end_time);

		$copyObj->setDueDate($this->due_date);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setStreet($this->street);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setZip($this->zip);

		$copyObj->setContactName($this->contact_name);

		$copyObj->setContactEmail($this->contact_email);

		$copyObj->setContactPhone($this->contact_phone);

		$copyObj->setNotes($this->notes);

		$copyObj->setEstimate($this->estimate);

		$copyObj->setAcctNum($this->acct_num);

		$copyObj->setDeptId($this->dept_id);

		$copyObj->setGrantId($this->grant_id);

		$copyObj->setOther($this->other);

		$copyObj->setQues1($this->ques1);

		$copyObj->setQues2($this->ques2);

		$copyObj->setQues3($this->ques3);

		$copyObj->setSlug($this->slug);

		$copyObj->setPhotoType($this->photo_type);

		$copyObj->setProcessing($this->processing);

		$copyObj->setGCalId($this->g_cal_id);

		$copyObj->setGCalIdCustom($this->g_cal_id_custom);

		$copyObj->setGCalIdCustomUrl($this->g_cal_id_custom_url);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getJobAttachments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJobAttachment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPhotos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPhoto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDeliverys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDelivery($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJobPhotographers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJobPhotographer($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJobClients() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJobClient($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Job Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     JobPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new JobPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Publication object.
	 *
	 * @param      Publication $v
	 * @return     Job The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPublication(Publication $v = null)
	{
		if ($v === null) {
			$this->setPublicationId(NULL);
		} else {
			$this->setPublicationId($v->getId());
		}

		$this->aPublication = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Publication object, it will not be re-added.
		if ($v !== null) {
			$v->addJob($this);
		}

		return $this;
	}


	/**
	 * Get the associated Publication object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Publication The associated Publication object.
	 * @throws     PropelException
	 */
	public function getPublication(PropelPDO $con = null)
	{
		if ($this->aPublication === null && ($this->publication_id !== null)) {
			$c = new Criteria(PublicationPeer::DATABASE_NAME);
			$c->add(PublicationPeer::ID, $this->publication_id);
			$this->aPublication = PublicationPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPublication->addJobs($this);
			 */
		}
		return $this->aPublication;
	}

	/**
	 * Declares an association between this object and a Project object.
	 *
	 * @param      Project $v
	 * @return     Job The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProject(Project $v = null)
	{
		if ($v === null) {
			$this->setProjectId(NULL);
		} else {
			$this->setProjectId($v->getId());
		}

		$this->aProject = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Project object, it will not be re-added.
		if ($v !== null) {
			$v->addJob($this);
		}

		return $this;
	}


	/**
	 * Get the associated Project object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Project The associated Project object.
	 * @throws     PropelException
	 */
	public function getProject(PropelPDO $con = null)
	{
		if ($this->aProject === null && ($this->project_id !== null)) {
			$c = new Criteria(ProjectPeer::DATABASE_NAME);
			$c->add(ProjectPeer::ID, $this->project_id);
			$this->aProject = ProjectPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProject->addJobs($this);
			 */
		}
		return $this->aProject;
	}

	/**
	 * Declares an association between this object and a Status object.
	 *
	 * @param      Status $v
	 * @return     Job The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setStatus(Status $v = null)
	{
		if ($v === null) {
			$this->setStatusId(NULL);
		} else {
			$this->setStatusId($v->getId());
		}

		$this->aStatus = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Status object, it will not be re-added.
		if ($v !== null) {
			$v->addJob($this);
		}

		return $this;
	}


	/**
	 * Get the associated Status object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Status The associated Status object.
	 * @throws     PropelException
	 */
	public function getStatus(PropelPDO $con = null)
	{
		if ($this->aStatus === null && ($this->status_id !== null)) {
			$c = new Criteria(StatusPeer::DATABASE_NAME);
			$c->add(StatusPeer::ID, $this->status_id);
			$this->aStatus = StatusPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aStatus->addJobs($this);
			 */
		}
		return $this->aStatus;
	}

	/**
	 * Declares an association between this object and a PhotoType object.
	 *
	 * @param      PhotoType $v
	 * @return     Job The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPhotoTypeRelatedByPhotoType(PhotoType $v = null)
	{
		if ($v === null) {
			$this->setPhotoType(NULL);
		} else {
			$this->setPhotoType($v->getId());
		}

		$this->aPhotoTypeRelatedByPhotoType = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the PhotoType object, it will not be re-added.
		if ($v !== null) {
			$v->addJob($this);
		}

		return $this;
	}


	/**
	 * Get the associated PhotoType object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     PhotoType The associated PhotoType object.
	 * @throws     PropelException
	 */
	public function getPhotoTypeRelatedByPhotoType(PropelPDO $con = null)
	{
		if ($this->aPhotoTypeRelatedByPhotoType === null && ($this->photo_type !== null)) {
			$c = new Criteria(PhotoTypePeer::DATABASE_NAME);
			$c->add(PhotoTypePeer::ID, $this->photo_type);
			$this->aPhotoTypeRelatedByPhotoType = PhotoTypePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPhotoTypeRelatedByPhotoType->addJobs($this);
			 */
		}
		return $this->aPhotoTypeRelatedByPhotoType;
	}

	/**
	 * Clears out the collJobAttachments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJobAttachments()
	 */
	public function clearJobAttachments()
	{
		$this->collJobAttachments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJobAttachments collection (array).
	 *
	 * By default this just sets the collJobAttachments collection to an empty array (like clearcollJobAttachments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJobAttachments()
	{
		$this->collJobAttachments = array();
	}

	/**
	 * Gets an array of JobAttachment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Job has previously been saved, it will retrieve
	 * related JobAttachments from storage. If this Job is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array JobAttachment[]
	 * @throws     PropelException
	 */
	public function getJobAttachments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobAttachments === null) {
			if ($this->isNew()) {
			   $this->collJobAttachments = array();
			} else {

				$criteria->add(JobAttachmentPeer::JOB_ID, $this->id);

				JobAttachmentPeer::addSelectColumns($criteria);
				$this->collJobAttachments = JobAttachmentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JobAttachmentPeer::JOB_ID, $this->id);

				JobAttachmentPeer::addSelectColumns($criteria);
				if (!isset($this->lastJobAttachmentCriteria) || !$this->lastJobAttachmentCriteria->equals($criteria)) {
					$this->collJobAttachments = JobAttachmentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJobAttachmentCriteria = $criteria;
		return $this->collJobAttachments;
	}

	/**
	 * Returns the number of related JobAttachment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related JobAttachment objects.
	 * @throws     PropelException
	 */
	public function countJobAttachments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJobAttachments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JobAttachmentPeer::JOB_ID, $this->id);

				$count = JobAttachmentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JobAttachmentPeer::JOB_ID, $this->id);

				if (!isset($this->lastJobAttachmentCriteria) || !$this->lastJobAttachmentCriteria->equals($criteria)) {
					$count = JobAttachmentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJobAttachments);
				}
			} else {
				$count = count($this->collJobAttachments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a JobAttachment object to this object
	 * through the JobAttachment foreign key attribute.
	 *
	 * @param      JobAttachment $l JobAttachment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJobAttachment(JobAttachment $l)
	{
		if ($this->collJobAttachments === null) {
			$this->initJobAttachments();
		}
		if (!in_array($l, $this->collJobAttachments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJobAttachments, $l);
			$l->setJob($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Job is new, it will return
	 * an empty collection; or if this Job has previously
	 * been saved, it will retrieve related JobAttachments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Job.
	 */
	public function getJobAttachmentsJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobAttachments === null) {
			if ($this->isNew()) {
				$this->collJobAttachments = array();
			} else {

				$criteria->add(JobAttachmentPeer::JOB_ID, $this->id);

				$this->collJobAttachments = JobAttachmentPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobAttachmentPeer::JOB_ID, $this->id);

			if (!isset($this->lastJobAttachmentCriteria) || !$this->lastJobAttachmentCriteria->equals($criteria)) {
				$this->collJobAttachments = JobAttachmentPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobAttachmentCriteria = $criteria;

		return $this->collJobAttachments;
	}

	/**
	 * Clears out the collPhotos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPhotos()
	 */
	public function clearPhotos()
	{
		$this->collPhotos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPhotos collection (array).
	 *
	 * By default this just sets the collPhotos collection to an empty array (like clearcollPhotos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPhotos()
	{
		$this->collPhotos = array();
	}

	/**
	 * Gets an array of Photo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Job has previously been saved, it will retrieve
	 * related Photos from storage. If this Job is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Photo[]
	 * @throws     PropelException
	 */
	public function getPhotos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotos === null) {
			if ($this->isNew()) {
			   $this->collPhotos = array();
			} else {

				$criteria->add(PhotoPeer::JOB_ID, $this->id);

				PhotoPeer::addSelectColumns($criteria);
				$this->collPhotos = PhotoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PhotoPeer::JOB_ID, $this->id);

				PhotoPeer::addSelectColumns($criteria);
				if (!isset($this->lastPhotoCriteria) || !$this->lastPhotoCriteria->equals($criteria)) {
					$this->collPhotos = PhotoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPhotoCriteria = $criteria;
		return $this->collPhotos;
	}

	/**
	 * Returns the number of related Photo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Photo objects.
	 * @throws     PropelException
	 */
	public function countPhotos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPhotos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PhotoPeer::JOB_ID, $this->id);

				$count = PhotoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PhotoPeer::JOB_ID, $this->id);

				if (!isset($this->lastPhotoCriteria) || !$this->lastPhotoCriteria->equals($criteria)) {
					$count = PhotoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPhotos);
				}
			} else {
				$count = count($this->collPhotos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Photo object to this object
	 * through the Photo foreign key attribute.
	 *
	 * @param      Photo $l Photo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPhoto(Photo $l)
	{
		if ($this->collPhotos === null) {
			$this->initPhotos();
		}
		if (!in_array($l, $this->collPhotos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPhotos, $l);
			$l->setJob($this);
		}
	}

	/**
	 * Clears out the collDeliverys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDeliverys()
	 */
	public function clearDeliverys()
	{
		$this->collDeliverys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDeliverys collection (array).
	 *
	 * By default this just sets the collDeliverys collection to an empty array (like clearcollDeliverys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDeliverys()
	{
		$this->collDeliverys = array();
	}

	/**
	 * Gets an array of Delivery objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Job has previously been saved, it will retrieve
	 * related Deliverys from storage. If this Job is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Delivery[]
	 * @throws     PropelException
	 */
	public function getDeliverys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDeliverys === null) {
			if ($this->isNew()) {
			   $this->collDeliverys = array();
			} else {

				$criteria->add(DeliveryPeer::JOB_ID, $this->id);

				DeliveryPeer::addSelectColumns($criteria);
				$this->collDeliverys = DeliveryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DeliveryPeer::JOB_ID, $this->id);

				DeliveryPeer::addSelectColumns($criteria);
				if (!isset($this->lastDeliveryCriteria) || !$this->lastDeliveryCriteria->equals($criteria)) {
					$this->collDeliverys = DeliveryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDeliveryCriteria = $criteria;
		return $this->collDeliverys;
	}

	/**
	 * Returns the number of related Delivery objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Delivery objects.
	 * @throws     PropelException
	 */
	public function countDeliverys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDeliverys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DeliveryPeer::JOB_ID, $this->id);

				$count = DeliveryPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DeliveryPeer::JOB_ID, $this->id);

				if (!isset($this->lastDeliveryCriteria) || !$this->lastDeliveryCriteria->equals($criteria)) {
					$count = DeliveryPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collDeliverys);
				}
			} else {
				$count = count($this->collDeliverys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Delivery object to this object
	 * through the Delivery foreign key attribute.
	 *
	 * @param      Delivery $l Delivery
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDelivery(Delivery $l)
	{
		if ($this->collDeliverys === null) {
			$this->initDeliverys();
		}
		if (!in_array($l, $this->collDeliverys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDeliverys, $l);
			$l->setJob($this);
		}
	}

	/**
	 * Clears out the collJobPhotographers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJobPhotographers()
	 */
	public function clearJobPhotographers()
	{
		$this->collJobPhotographers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJobPhotographers collection (array).
	 *
	 * By default this just sets the collJobPhotographers collection to an empty array (like clearcollJobPhotographers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJobPhotographers()
	{
		$this->collJobPhotographers = array();
	}

	/**
	 * Gets an array of JobPhotographer objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Job has previously been saved, it will retrieve
	 * related JobPhotographers from storage. If this Job is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array JobPhotographer[]
	 * @throws     PropelException
	 */
	public function getJobPhotographers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobPhotographers === null) {
			if ($this->isNew()) {
			   $this->collJobPhotographers = array();
			} else {

				$criteria->add(JobPhotographerPeer::JOB_ID, $this->id);

				JobPhotographerPeer::addSelectColumns($criteria);
				$this->collJobPhotographers = JobPhotographerPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JobPhotographerPeer::JOB_ID, $this->id);

				JobPhotographerPeer::addSelectColumns($criteria);
				if (!isset($this->lastJobPhotographerCriteria) || !$this->lastJobPhotographerCriteria->equals($criteria)) {
					$this->collJobPhotographers = JobPhotographerPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJobPhotographerCriteria = $criteria;
		return $this->collJobPhotographers;
	}

	/**
	 * Returns the number of related JobPhotographer objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related JobPhotographer objects.
	 * @throws     PropelException
	 */
	public function countJobPhotographers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJobPhotographers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JobPhotographerPeer::JOB_ID, $this->id);

				$count = JobPhotographerPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JobPhotographerPeer::JOB_ID, $this->id);

				if (!isset($this->lastJobPhotographerCriteria) || !$this->lastJobPhotographerCriteria->equals($criteria)) {
					$count = JobPhotographerPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJobPhotographers);
				}
			} else {
				$count = count($this->collJobPhotographers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a JobPhotographer object to this object
	 * through the JobPhotographer foreign key attribute.
	 *
	 * @param      JobPhotographer $l JobPhotographer
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJobPhotographer(JobPhotographer $l)
	{
		if ($this->collJobPhotographers === null) {
			$this->initJobPhotographers();
		}
		if (!in_array($l, $this->collJobPhotographers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJobPhotographers, $l);
			$l->setJob($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Job is new, it will return
	 * an empty collection; or if this Job has previously
	 * been saved, it will retrieve related JobPhotographers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Job.
	 */
	public function getJobPhotographersJoinPhotographer($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobPhotographers === null) {
			if ($this->isNew()) {
				$this->collJobPhotographers = array();
			} else {

				$criteria->add(JobPhotographerPeer::JOB_ID, $this->id);

				$this->collJobPhotographers = JobPhotographerPeer::doSelectJoinPhotographer($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobPhotographerPeer::JOB_ID, $this->id);

			if (!isset($this->lastJobPhotographerCriteria) || !$this->lastJobPhotographerCriteria->equals($criteria)) {
				$this->collJobPhotographers = JobPhotographerPeer::doSelectJoinPhotographer($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobPhotographerCriteria = $criteria;

		return $this->collJobPhotographers;
	}

	/**
	 * Clears out the collJobClients collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJobClients()
	 */
	public function clearJobClients()
	{
		$this->collJobClients = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJobClients collection (array).
	 *
	 * By default this just sets the collJobClients collection to an empty array (like clearcollJobClients());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJobClients()
	{
		$this->collJobClients = array();
	}

	/**
	 * Gets an array of JobClient objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Job has previously been saved, it will retrieve
	 * related JobClients from storage. If this Job is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array JobClient[]
	 * @throws     PropelException
	 */
	public function getJobClients($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobClients === null) {
			if ($this->isNew()) {
			   $this->collJobClients = array();
			} else {

				$criteria->add(JobClientPeer::JOB_ID, $this->id);

				JobClientPeer::addSelectColumns($criteria);
				$this->collJobClients = JobClientPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JobClientPeer::JOB_ID, $this->id);

				JobClientPeer::addSelectColumns($criteria);
				if (!isset($this->lastJobClientCriteria) || !$this->lastJobClientCriteria->equals($criteria)) {
					$this->collJobClients = JobClientPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJobClientCriteria = $criteria;
		return $this->collJobClients;
	}

	/**
	 * Returns the number of related JobClient objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related JobClient objects.
	 * @throws     PropelException
	 */
	public function countJobClients(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJobClients === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JobClientPeer::JOB_ID, $this->id);

				$count = JobClientPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JobClientPeer::JOB_ID, $this->id);

				if (!isset($this->lastJobClientCriteria) || !$this->lastJobClientCriteria->equals($criteria)) {
					$count = JobClientPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collJobClients);
				}
			} else {
				$count = count($this->collJobClients);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a JobClient object to this object
	 * through the JobClient foreign key attribute.
	 *
	 * @param      JobClient $l JobClient
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJobClient(JobClient $l)
	{
		if ($this->collJobClients === null) {
			$this->initJobClients();
		}
		if (!in_array($l, $this->collJobClients, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJobClients, $l);
			$l->setJob($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Job is new, it will return
	 * an empty collection; or if this Job has previously
	 * been saved, it will retrieve related JobClients from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Job.
	 */
	public function getJobClientsJoinClient($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(JobPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJobClients === null) {
			if ($this->isNew()) {
				$this->collJobClients = array();
			} else {

				$criteria->add(JobClientPeer::JOB_ID, $this->id);

				$this->collJobClients = JobClientPeer::doSelectJoinClient($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JobClientPeer::JOB_ID, $this->id);

			if (!isset($this->lastJobClientCriteria) || !$this->lastJobClientCriteria->equals($criteria)) {
				$this->collJobClients = JobClientPeer::doSelectJoinClient($criteria, $con, $join_behavior);
			}
		}
		$this->lastJobClientCriteria = $criteria;

		return $this->collJobClients;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collJobAttachments) {
				foreach ((array) $this->collJobAttachments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPhotos) {
				foreach ((array) $this->collPhotos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDeliverys) {
				foreach ((array) $this->collDeliverys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJobPhotographers) {
				foreach ((array) $this->collJobPhotographers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJobClients) {
				foreach ((array) $this->collJobClients as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collJobAttachments = null;
		$this->collPhotos = null;
		$this->collDeliverys = null;
		$this->collJobPhotographers = null;
		$this->collJobClients = null;
			$this->aPublication = null;
			$this->aProject = null;
			$this->aStatus = null;
			$this->aPhotoTypeRelatedByPhotoType = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseJob:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseJob::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseJob
